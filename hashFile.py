import os 
import hashlib
import argparse
from termcolor import cprint

class hashFile:
    def __init__(self) -> None:
        pass

    @staticmethod
    def getArgs():
        parser = argparse.ArgumentParser(description="scan all files")
        parser.add_argument("path", help="path to top lvl dir")
        parser.add_argument("-c","--compare",help="provide hashes of two files to compare")

        return parser.parse_args()

    def open_hash(self,hash_path):
        hash = hash_path
        if os.path.isfile(hash_path):
            with open(hash_path,'r') as f:
                hash = f.read().splitlines()[0]

        return hash

    def compare_hash(self , old , new):
        if old == new :
            cprint("> Computation complete {}".format(old),'green')
        else:
            cprint(">Missmatch \n old : {0} \n new : {1}".format(old,new),'red')

    def hash_file(self,file):
        BUFF_SIZE = 65536
        digest = hashlib.sha1()
        cprint("> Computing message digest",'blue')

        with open(file , 'rb') as f:
            while True:
                data = f.read(BUFF_SIZE)
                if not data:
                    break
                digest.update(data)
        hash = digest.hexdigest()

        return hash 

    def main(self):
        args = self.getArgs()
        self.path = args.path
        hash = self.hash_file(self.path)

        if args.compare:
            old_hash = self.open_hash(args.compare)
            self.compare_hash(old_hash , hash)
            cprint("> Computation complete {}".format(hash),'green')

        
    


if __name__ == "__main__":
    instance = hashFile()
    instance.main()